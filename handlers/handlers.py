import logging

from aiogram import Router
from aiogram import types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command

from sqlalchemy.ext.asyncio import AsyncSession

from client import YaDiskClient
from config import TOKEN_URL
from db import async_session_maker, User
from db.models import YandexDiskFolder
from .callbacks import callback_start
from .keyboards import keyboard_register
from sqlalchemy import select


async def help_command(message: types.Message):
    help_str = """–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç <b><i>RANEPA BOT</i></b>
    üí¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>/start</b>
    üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/status</b>"""

    logging.info(f"user {message.from_user.id} asked for help")
    await message.reply(text=help_str, parse_mode="HTML")


async def status_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async with async_session_maker() as session:
        session: AsyncSession

        user = await session.get(User, message.from_user.id)

        if user is None:
            logging.info(f"user {message.from_user.id} requested status but is not registered")
            await message.reply(text="–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é /start")
            return

        text = f"<b>–í–∞—à–µ –∏–º—è</b>: <i>{user.tg_username}</i>\n"

        if user.teacher_id is None:
            text += f"<b>ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π</b>: <i>{user.id}</i>\n"
        else:
            text += f"<b>–í–∞—à ID</b>: <i>{user.id}</i>\n"

        if user.yadisk_token:
            text += f"<b>–í–∞—à TOKEN –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞</b>: <i>{user.yadisk_token}</i>\n"

        if user.teacher_id:
            text += f"<b>–í—ã –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ </b>: <i>@{user.teacher_id}</i>\n"

        logging.info(f"user {message.from_user.id} requested status")
        await message.reply(text=text, parse_mode="HTML")

        await session.close()


async def start_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

        user = await session.get(User, message.from_user.id)

        if user is None:
            logging.info(f"user {message.from_user.id} started the bot and is not registered")
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard_register)
            return

        if user.teacher_id is None:
            logging.info(f"user {message.from_user.id} is already registered as a teacher")
            await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, ID –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π - {user.id}")
        else:
            teacher = await session.get(User, user.teacher_id)
            logging.info(
                f"user {message.from_user.id} is already registered as a listener under @{teacher.tg_username}")
            await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å —É @{teacher.tg_username}")

        await session.close()


async def callback_register_user(message: types.Message):
    teacher_id = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ

    async with async_session_maker() as session:
        session: AsyncSession

        teacher = await session.get(User, teacher_id)
        if teacher is None:
            logging.info(
                f"user {message.from_user.id} attempted to register with non-existing teacher ID: {teacher_id}")
            await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        new_user = User(id=message.from_user.id, teacher_id=teacher_id, tg_username=message.from_user.username)
        session.add(new_user)
        await session.commit()
        await session.close()

        logging.info(f"user {message.from_user.id} registered as a student with teacher ID: {teacher_id}")
        await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å —É @{teacher.tg_username}")


async def register_command(message: types.Message):
    instructions = (
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ [—Å—Å—ã–ª–∫–µ]({TOKEN_URL}):\n"
        "2. –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å:\n"
        "3. C–∫–æ–ø–∏—Ä—É–π—Ç–µ –¢–û–ö–ï–ù –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ /token –¢–û–ö–ï–ù:\n"
    )

    logging.info(f"user {message.from_user.id} requested token registration instructions")
    await message.reply(instructions, parse_mode=ParseMode.MARKDOWN)


async def token_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

        user = await session.get(User, message.from_user.id)

        if user is None:
            logging.info(f"user {message.from_user.id} attempted to add token but is not registered as a teacher")
            await message.reply("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            return

        if user.teacher_id:
            logging.info(f"user {message.from_user.id} attempted to add token but is registered as a listener")
            await message.reply("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
            return

        command_parts = message.text.split()

        if len(command_parts) < 2:
            if user.yadisk_token:
                logging.info(f"user {message.from_user.id} checked their current token (no token set)")
                await message.reply(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –¢–û–ö–ï–ù = {user.yadisk_token}")
            else:
                logging.info(f"user {message.from_user.id} checked their current token")
                await message.reply("–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/token –í–ê–®_–¢–û–ö–ï–ù`.")

            return

        token = command_parts[1].strip()

        client = YaDiskClient()
        result = await client.check_token_validity(token=token)

        if result:
            user.yadisk_token = token
            await session.commit()

            logging.info(f"user {message.from_user.id} set a new token: {token}")
            await message.reply(f"–í–∞—à –Ω–æ–≤—ã–π –¢–û–ö–ï–ù = {token}")
        else:
            logging.info(f"user {message.from_user.id} attempted to add invalid token: {token}")
            await message.reply(f"–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞")


async def add_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

        text = message.text.split()

        if len(text) < 2:
            logging.info(f"user {message.from_user.id} attempted to add folder without path")
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add –ü–£–¢–¨ –ö –ü–ê–ü–ö–ï")
            return

        folder_path = message.text.split()[1].strip()

        user = await session.get(User, message.from_user.id)

        if not user:
            logging.info(f"user {message.from_user.id} attempted to add folder but is not registered")
            await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
            return

        if user.teacher_id:
            logging.info(f"user {message.from_user.id} attempted to add folder but is registered as a listener")
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
            return

        if not user.yadisk_token:
            logging.info(f"user {message.from_user.id} attempted to add folder without token")
            await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /token")
            return

        new_folder = YandexDiskFolder(teacher_id=user.id, path=folder_path)
        session.add(new_folder)
        await session.commit()

        logging.info(f"user {message.from_user.id} added a folder: {folder_path}")
        await message.reply(f"–ü–∞–ø–∫–∞ —Å –ø—É—Ç—ë–º {folder_path} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ")


async def delete_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

        text = message.text.split()

        if len(text) < 2:
            logging.info(f"user {message.from_user.id} attempted to delete folder without path")
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete –ü–£–¢–¨ –ö –ü–ê–ü–ö–ï")
            return

        folder_path = message.text.split()[1].strip()

        user = await session.get(User, message.from_user.id)

        if not user:
            logging.info(f"user {message.from_user.id} attempted to delete folder but is not registered")
            await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
            return

        if user.teacher_id:
            logging.info(f"user {message.from_user.id} attempted to delete folder but is registered as a listener")
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
            return

        if not user.yadisk_token:
            logging.info(f"user {message.from_user.id} attempted to delete folder without token")

            await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /token")

            return

        stmt = select(YandexDiskFolder).filter(
            YandexDiskFolder.teacher_id == user.id,
            YandexDiskFolder.path == folder_path
        )
        result = await session.execute(stmt)
        folder = result.scalars().first()

        if not folder:
            logging.info(f"user {message.from_user.id} attempted to delete non-existent folder: {folder_path}")
            await message.reply("–ü–∞–ø–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await session.delete(folder)
        await session.commit()

        logging.info(f"user {message.from_user.id} deleted a folder: {folder_path}")
        await message.reply(f"–ü–∞–ø–∫–∞ —Å –ø—É—Ç—ë–º {folder_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")


def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(help_command, Command(commands=["help"]))
    router.message.register(status_command, Command(commands=["status"]))
    router.message.register(start_command, Command(commands=["start"]))
    router.message.register(register_command, Command(commands=["register"]))
    router.message.register(token_command, Command(commands=["token"]))
    router.message.register(add_command, Command(commands=["add"]))
    router.message.register(delete_command, Command(commands=["delete"]))
    router.message.register(callback_register_user)

    # callbacks
    router.callback_query.register(callback_start, lambda c: c.data.startswith('register_'))
